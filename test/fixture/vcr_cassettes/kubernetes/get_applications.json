[
  {
    "request": {
      "body": "",
      "headers": {
        "authorization": "Bearer 50m34p1c0d3th4td035ntw0rk"
      },
      "method": "get",
      "options": [],
      "request_body": "",
      "url": "https://api.civo.com/v2/kubernetes/applications?"
    },
    "response": {
      "binary": false,
      "body": "[{\"name\":\"cert-manager\",\"title\":\"Cert Manager\",\"version\":\"v0.10.0\",\"default\":null,\"dependencies\":[\"Helm\"],\"maintainer\":\"alex@openfaas.com\",\"description\":\"cert-manager is a native Kubernetes certificate management controller\",\"post_install\":\"## cert-manager - a native Kubernetes certificate management controller\\n\\n### Get started\\n\\n[cert-manager docs](https://cert-manager.readthedocs.io/en/latest/)\\n\\n* Create an [Issuer](https://docs.cert-manager.io/en/latest/tutorials/acme/index.html?highlight=issuer)\\n\\n* Create a [Certificate or Ingress record](https://docs.cert-manager.io/en/latest/tasks/issuing-certificates/index.html)\\n\",\"url\":\"https://cert-manager.readthedocs.io/en/latest/\",\"category\":\"architecture\",\"image_url\":\"https://api.civo.com/k3s-marketplace/cert-manager.png\",\"plans\":null},{\"name\":\"Helm\",\"title\":null,\"version\":\"2.14.3\",\"default\":null,\"dependencies\":null,\"maintainer\":\"hello@civo.com\",\"description\":\"Helm (tiller) helps you define, install, and upgrade even the most complex Kubernetes application.\",\"post_install\":\"## Helm - The package manager for Kubernetes\\n\\n### External access\\n\\nHelm is available to anyone with the credentials to access your Kubernetes cluster.\\n\\n### Usage instructions\\n\\nHelm has [very comprehensive documentation](https://helm.sh/docs/) on all things from writing your own charts to installing, upgrading and deleting applications written as Helm charts.\\n\",\"url\":\"https://helm.sh\",\"category\":\"management\",\"image_url\":\"https://api.civo.com/k3s-marketplace/helm.png\",\"plans\":null},{\"name\":\"Linkerd\",\"title\":null,\"version\":\"2.5.0\",\"default\":null,\"dependencies\":null,\"maintainer\":\"hello@civo.com\",\"description\":\"Linkerd is a service mesh, giving you runtime debugging, observability, reliability, and security.\",\"post_install\":\"## Linkerd service mesh\\n\\n### External access\\n\\nThe Linkerd dashboard is not available to the public by default, but if you install the linkerd client utility, you can open a tunnel to it easily:\\n\\n```\\ncurl -sL https://run.linkerd.io/install | sh\\n# or brew install linkerd on macOS\\n\\nlinkerd dashboard\\n```\\n\\nThis will automatically open the Linkerd dashboard in your browser, or you can visit http://127.0.0.1:50750\\n\\n### Usage instructions\\n\\nLinkerd provides instructions on [installing a demo application](https://linkerd.io/2/getting-started/#step-5-install-the-demo-app) that uses Linkerd on their site. It's worth a read and a play with service meshes to get the hang of how/when they are of benefit.\\n\",\"url\":\"https://linkerd.io\",\"category\":\"architecture\",\"image_url\":\"https://api.civo.com/k3s-marketplace/linkerd.png\",\"plans\":null},{\"name\":\"Longhorn\",\"title\":null,\"version\":\"0.5.0\",\"default\":null,\"dependencies\":null,\"maintainer\":\"hello@civo.com\",\"description\":\"Longhorn is a lightweight, reliable, and powerful distributed block storage system for Kubernetes.\",\"post_install\":\"## Using Longhorn persistent volumes\\n\\n### External access\\n\\nBy default external access to the Longhorn dashboard isn't available. This is easily changed by applying the following YAML to your cluster with `kubectl apply -f longhorn-service.yaml` (or whatever you call the file containing the contents below):\\n\\n\\n```\\nkind: Service\\napiVersion: v1\\nmetadata:\\n  labels:\\n    app: longhorn-ui\\n  name: longhorn-frontend\\n  namespace: longhorn-system\\nspec:\\n  selector:\\n    app: longhorn-ui\\n  ports:\\n  - port: 8000\\n    targetPort: 8000\\n  type: LoadBalancer\\n```\\n\\nThis will open up http://YOUR_CLUSTER_ID.k8s.civo.com:8000/dashboard to the whole world. You should lock this down in the [firewall](https://www.civo.com/account/firewalls) automatically created in Civo for your Kubernetes cluster. Locking down the firewall will only affect access from OUTSIDE of your Kubernetes cluster, access from your applications within Kubernetes will not be affected.\\n\\n### Usage instructions\\n\\nCreate a persistent volume in a file called something like `pv.yaml` with:\\n\\n```\\napiVersion: v1\\nkind: PersistentVolume\\nmetadata:\\n  name: mysql-pv\\n  namespace: apps\\n  labels:\\n    name: mysql-data\\n    type: longhorn\\nspec:\\n  capacity:\\n    storage: 5G\\n  volumeMode: Filesystem\\n  storageClassName: longhorn\\n  accessModes:\\n    - ReadWriteOnce\\n  csi:\\n    driver: io.rancher.longhorn\\n    fsType: ext4\\n    volumeAttributes:\\n      numberOfReplicates: '2'\\n      staleReplicaTimeout: '20'\\n    volumeHandle: mysql-data\\n```\\n\\nAnd create a claim to that volume (like an abstract request so that something can use the volume) in something like `pv-claim.yaml`:\\n\\n```\\napiVersion: v1\\nkind: PersistentVolumeClaim\\nmetadata:\\n  name: mysql-pv-claim\\n  labels:\\n    type: longhorn\\n    app: example\\nspec:\\n  storageClassName: longhorn\\n  accessModes:\\n    - ReadWriteOnce\\n  resources:\\n    requests:\\n      storage: 5Gi\\n```\\n\",\"url\":\"https://github.com/longhorn/longhorn\",\"category\":\"storage\",\"image_url\":\"https://api.civo.com/k3s-marketplace/longhorn.png\",\"plans\":null},{\"name\":\"Maesh\",\"title\":null,\"version\":\"Latest\",\"default\":null,\"dependencies\":[\"Helm\"],\"maintainer\":\"hello@civo.com\",\"description\":\"Maesh is an easy to configure and non-invasive service mesh that allows visibility and management of the traffic flows.\",\"post_install\":\"## Maesh - a straight-forward, easy to configure, and non-invasive service mesh\\n\\n### Usage instruction\\n\\nYou configure your services to use Maesh with a simple annontation. For more instructions on configuring your services to use Maesh see [their website](https://docs.mae.sh/configuration/).\\n\",\"url\":\"https://mae.sh\",\"category\":\"architecture\",\"image_url\":\"https://api.civo.com/k3s-marketplace/maesh.png\",\"plans\":null},{\"name\":\"MariaDB\",\"title\":null,\"version\":\"10.4.7\",\"default\":null,\"dependencies\":[\"Longhorn\"],\"maintainer\":\"hello@civo.com\",\"description\":\"MariaDB is a community-developed fork of MySQL intended to remain free under the GNU GPL.\",\"post_install\":\"## MariaDB - MySQL compatible database\\n\\n### External access\\n\\nBy default external access to the MariaDB port isn't available. This is easily changed by applying the following YAML to your cluster with `kubectl apply -f mariadb-service.yaml` (or whatever you call the file containing the contents below):\\n\\n```\\napiVersion: v1\\nkind: Service\\nmetadata:\\n  name: mariadb-service\\nspec:\\n  type: LoadBalancer\\n  ports:\\n    - port: 3306\\n      targetPort: 3306\\n      protocol: TCP\\n  selector:\\n    app: mariadb\\n```\\n\\nThis will open up http://YOUR_CLUSTER_ID.k8s.civo.com:3306 to the whole world. You should lock this down in the [firewall](https://www.civo.com/account/firewalls) automatically created in Civo for your Kubernetes cluster. Locking down the firewall will only affect access from OUTSIDE of your Kubernetes cluster, access from your applications within Kubernetes will not be affected.\\n\\n### Usage instruction\\n\\nYou can use this application from within your cluster by just using the hostname `mariadb` and can create databases and users using the `root` access credentials above this message. For example, to create an application's database and user credentials and given that the `kubectx` and [Civo CLI](https://github.com/civo/cli) are installed, with a Civo Kubernetes cluster called `my-cluster-name`:\\n\\n```\\n$ civo k3s config my-cluster-name --save\\n$ kubectx my-cluster-name\\n$ kubectl run tmp-shell --generator=run-pod/v1 --rm -i \\\\\\n  --tty --image alpine -- /bin/sh\\n\\n/ # apk update\\n/ # apk add mariadb-client\\n/ # mysql -u root -pYOUR_ROOT_PASSWORD_HERE -h mariadb\\n\\nmysql\\u003e CREATE DATABASE my_application;\\nmysql\\u003e GRANT ALL ON my_application.* to my_user identified \\n       by 'super-strong-password-here';\\n```\\n\",\"url\":\"https://mariadb.com\",\"category\":\"database\",\"image_url\":\"https://api.civo.com/k3s-marketplace/mariadb.png\",\"plans\":[{\"label\":\"5GB\",\"configuration\":{\"VOLUME_SIZE\":{\"value\":\"5Gi\"}}},{\"label\":\"10GB\",\"configuration\":{\"VOLUME_SIZE\":{\"value\":\"10Gi\"}}},{\"label\":\"20GB\",\"configuration\":{\"VOLUME_SIZE\":{\"value\":\"20Gi\"}}}]},{\"name\":\"metrics-server\",\"title\":\"Metrics Server\",\"version\":\"Latest\",\"default\":null,\"dependencies\":[\"Helm\"],\"maintainer\":\"alex@openfaas.com\",\"description\":\"Metrics Server is a cluster-wide aggregator of resource usage data.\",\"post_install\":\"## Metrics Server - provide metrics for Kubernetes HPAv2 (Pod auto-scaling)\\n\\n### Test it out\\n\\nCheck that data is being received from nodes:\\n\\n```\\nkubectl get --raw \\\"/apis/metrics.k8s.io/v1beta1/nodes\\\"\\n```\\n\\nCheck node usage:\\n\\n```sh\\nkubectl top node\\n```\\n\\nCheck node usage:\\n\\n```sh\\nkubectl top pod --all-namespaces\\n```\\n\\n### Usage instruction\\n\\nSee the Kubernetes documentation for a worked-example of how to use HPAv2.\\n\\n[Horizontal Pod Autoscaler](https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/)\\n\\nYou can also see the OpenFaaS documentation for a detailed tutorial.\\n\\n* [OpenFaaS - install the metrics server](https://docs.openfaas.com/tutorials/kubernetes-hpa/#install-the-metrics-server)\\n\",\"url\":\"https://kubernetes.io/docs/tasks/debug-application-cluster/resource-metrics-pipeline/#metrics-server\",\"category\":\"architecture\",\"image_url\":\"https://api.civo.com/k3s-marketplace/metrics-server.png\",\"plans\":null},{\"name\":\"MinIO\",\"title\":null,\"version\":\"2019-08-29\",\"default\":null,\"dependencies\":[\"Longhorn\"],\"maintainer\":\"hello@civo.com\",\"description\":\"Minio is an Amazon S3 compatible object storage server.\",\"post_install\":\"## Using MinIO for S3 compatible object storage\\n\\n### External access\\n\\nBy default external access to the MinIO UI isn't available. This is easily changed by applying the following YAML to your cluster with `kubectl apply -f minio-service.yaml` (or whatever you call the file containing the contents below):\\n\\n```\\napiVersion: v1\\nkind: Service\\nmetadata:\\n  name: minio-service\\nspec:\\n  type: LoadBalancer\\n  ports:\\n    - port: 9000\\n      targetPort: 9000\\n      protocol: TCP\\n  selector:\\n    app: minio\\n```\\n\\nThis will open up http://YOUR_CLUSTER_ID.k8s.civo.com:9000 to the whole world. You should lock this down in the [firewall](https://www.civo.com/account/firewalls) automatically created in Civo for your Kubernetes cluster. Locking down the firewall will only affect access from OUTSIDE of your Kubernetes cluster, access from your applications within Kubernetes will not be affected.\\n\\n### Usage instruction\\n\\nWe'd recommend installing [mc](https://github.com/minio/mc) the MinIO client for your operating system, to allow easy file operations from the command line.\\n\\nOther than that, your access key and secret key should be above this message and you can use those to configure your application to access MinIO just as you would with S3. For example, Ruby on Rails ActiveStorage is configured with something like:\\n\\n```\\nminio:\\n  service: S3\\n  access_key_id: YOUR_ACCESS_KEY_HERE\\n  secret_access_key: YOUR_SECRET_KEY_HERE\\n  region: us-east-1\\n  bucket: your_own_bucket\\n  endpoint: \\\"http://YOUR_CLUSTER_ID.k8s.civo.com:9000\\\"\\n  force_path_style: true\\n```\\n\\nWe would also recommend installing TLS certificates and using the pre-installed Traefik as an Ingress controller.\\n\",\"url\":\"https://min.io\",\"category\":\"storage\",\"image_url\":\"https://api.civo.com/k3s-marketplace/minio.png\",\"plans\":[{\"label\":\"5GB\",\"configuration\":{\"PV_SIZE_GB\":{\"value\":\"5Gi\"}}},{\"label\":\"10GB\",\"configuration\":{\"PV_SIZE_GB\":{\"value\":\"10Gi\"}}},{\"label\":\"20GB\",\"configuration\":{\"PV_SIZE_GB\":{\"value\":\"20Gi\"}}}]},{\"name\":\"OpenFaaS\",\"title\":null,\"version\":\"0.18.0\",\"default\":null,\"dependencies\":[\"Helm\"],\"maintainer\":\"@openfaasltd\",\"description\":\"OpenFaaS makes it easy for developers to deploy event-driven functions and microservices to Kubernetes without repetitive, boiler-plate coding.\",\"post_install\":\"## OpenFaaS\\n\\nThank you for deploying [OpenFaaS](https://github.com/openfaas/faas) to Civo's k3s service.\\n\\n## Obtain access\\n\\nThe OpenFaaS gateway has been made available through a `NodePort` on port `31112` on each node.\\n\\n* Go to your Civo dashboard, click Kubernetes and then your OpenFaaS Cluster.\\n\\nLook for the DNS entry that you find there, it may look something like `6c1c1646-25cf-44f0-9bd5-53ee35cd7c84.k8s.civo.com`\\n\\nThis DNS record which points at each of the nodes in your cluster.\\n\\n* Set the following URL:\\n\\n```sh\\nexport DNS=\\\"\\\" # As per dashboard\\nexport OPENFAAS_URL=http://$DNS:31112\\n```\\n\\n### Get your kubeconfig\\n\\nPick A or B:\\n\\n* A) Get your kubeconfig via command-line\\n\\n    ```sh\\n    civo k8s ls\\n\\n    civo k8s kubeconfig --save \\u003cCLUSTER_NAME\\u003e\\n\\n    kubectl config set-context \\u003cCLUSTER_NAME\\u003e\\n    ```\\n\\n* B) Get your kubeconfig via the Dashboard\\n\\n    Download your `kubeconfig` file from the Civo dashboard.\\n\\n    Now set the `KUBECONFIG` environment variable, so that you point at your new cluster:\\n\\n    ```\\n    export KUBECONFIG=$HOME/Downloads/config-file.yaml\\n    ```\\n\\n### Find your generated password\\n\\nYou can find your password above and save it as `password.txt`.\\n\\nAlternative, retrieve the password using `kubectl`:\\n\\n```\\necho $(kubectl get secret -n openfaas basic-auth -o jsonpath=\\\"{.data.basic-auth-password}\\\" | base64 --decode; echo) \\u003e password.txt\\n```\\n\\n### Use the CLI to log in\\n\\nNow install the [faas-cli](http://github.com/openfaas/faas-cli) and log in:\\n\\n```\\ncat password.txt | faas-cli login --username admin --password-stdin\\n```\\n\\n### Deploy a test function\\n\\n```\\nfaas-cli store list\\n\\n# Find one you like\\n\\nfaas-cli store deploy nodeinfo\\n\\n# List your functions\\n\\nfaas-cli list --verbose\\n\\n# Check when the function is ready\\n\\nfaas-cli describe nodeinfo\\n\\nName:                nodeinfo\\nStatus:              Ready\\n\\n# Invoke the function using the URL given above, or via `faas-cli invoke`\\n\\necho | faas-cli invoke nodeinfo\\necho -n \\\"verbose\\\" | faas-cli invoke nodeinfo\\n```\\n\\n### Access the OpenFaaS Gateway UI\\n\\nYou can now use the DNS entry you found earlier in a web-browser to access your dashboard.\\n\\n```sh\\necho $OPENFAAS_URL\\n```\\n\\n## Next steps\\n\\n* Read the docs: [Deploy TLS with LetsEncrypt to enable HTTPS](https://docs.openfaas.com/reference/ssl/kubernetes-with-cert-manager/)\\n\\n* Learn OpenFaaS: [Try The Official Workshop](https://github.com/openfaas/workshop)\\n\\n* Get help: Join the [OpenFaaS Slack](https://slack.openfaas.io/)\\n\",\"url\":\"https://www.openfaas.com/\",\"category\":\"architecture\",\"image_url\":\"https://api.civo.com/k3s-marketplace/openfaas.png\",\"plans\":null},{\"name\":\"PostgreSQL\",\"title\":null,\"version\":11.5,\"default\":null,\"dependencies\":[\"Longhorn\"],\"maintainer\":\"hello@civo.com\",\"description\":\"The PostgreSQL object-relational database system provides reliability and data integrity.\",\"post_install\":\"## PostgreSQL - reliable SQL database\\n\\n### External access\\n\\nBy default external access to the PostgreSQL port isn't available. This is easily changed by applying the following YAML to your cluster with `kubectl apply -f postgresql-service.yaml` (or whatever you call the file containing the contents below):\\n\\n```\\napiVersion: v1\\nkind: Service\\nmetadata:\\n  name: postgresql-service\\nspec:\\n  type: LoadBalancer\\n  ports:\\n    - port: 5432\\n      targetPort: 5432\\n      protocol: TCP\\n  selector:\\n    app: postgresql\\n```\\n\\nThis will open up http://YOUR_CLUSTER_ID.k8s.civo.com:5432 to the whole world. You should lock this down in the [firewall](https://www.civo.com/account/firewalls) automatically created in Civo for your Kubernetes cluster. Locking down the firewall will only affect access from OUTSIDE of your Kubernetes cluster, access from your applications within Kubernetes will not be affected.\\n\\n### Usage instruction\\n\\nYou can use this application from within your cluster by just using the hostname `postgresql` and can create databases and users using the admin access credentials above this message. For example, to create an application's database and user credentials and given that the `kubectx` and [Civo CLI](https://github.com/civo/cli) are installed, with a Civo Kubernetes cluster called `my-cluster-name`:\\n\\n```\\n$ civo k3s config my-cluster-name --save\\n$ kubectx my-cluster-name\\n$ kubectl run tmp-shell --generator=run-pod/v1 --rm -i \\\\\\n  --tty --image alpine -- /bin/sh\\n\\n/ # apk update\\n/ # apk add postgresql-client\\n/ # psql -U ADMIN_USERNAME -h postgresql postgresdb\\nPassword for user 12CNT2Eq6i: \\npsql (11.5)\\nType \\\"help\\\" for help.\\n\\npostgresdb=# CREATE DATABASE yourdbname;\\npostgresdb=# CREATE USER youruser WITH ENCRYPTED PASSWORD 'super-strong-password';\\npostgresdb=# GRANT ALL PRIVILEGES ON DATABASE yourdbname TO youruser;\\n```\\n\",\"url\":\"https://www.postgresql.org\",\"category\":\"database\",\"image_url\":\"https://api.civo.com/k3s-marketplace/postgresql.png\",\"plans\":[{\"label\":\"5GB\",\"configuration\":{\"VOLUME_SIZE\":{\"value\":\"5Gi\"}}},{\"label\":\"10GB\",\"configuration\":{\"VOLUME_SIZE\":{\"value\":\"10Gi\"}}},{\"label\":\"20GB\",\"configuration\":{\"VOLUME_SIZE\":{\"value\":\"20Gi\"}}}]},{\"name\":\"Redis\",\"title\":null,\"version\":3.2,\"default\":null,\"dependencies\":null,\"maintainer\":\"hello@civo.com\",\"description\":\"Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker.\",\"post_install\":\"## Redis - in-memory DB and cache\\n\\n### External access\\n\\nBy default external access to the Redis port isn't available. This is easily changed by applying the following YAML to your cluster with `kubectl apply -f redis-service.yaml` (or whatever you call the file containing the contents below):\\n\\n```\\napiVersion: v1\\nkind: Service\\nmetadata:\\n  name: redis\\nspec:\\n  type: LoadBalancer\\n  ports:\\n    - port: 6379\\n      targetPort: 6379\\n      protocol: TCP\\n  selector:\\n    app: redis\\n```\\n\\nThis will open up http://YOUR_CLUSTER_ID.k8s.civo.com:6379 to the whole world. You should lock this down in the [firewall](https://www.civo.com/account/firewalls) automatically created in Civo for your Kubernetes cluster. Locking down the firewall will only affect access from OUTSIDE of your Kubernetes cluster, access from your applications within Kubernetes will not be affected.\\n\\n### Usage instructions\\n\\nYou can use this application from within your cluster by just using the hostname `redis` and the password above this message. For example, to connect to Redis inside your cluster to test it or look at its data, you could do something like this:\\n\\n```\\n$ kubectl run tmp-shell --generator=run-pod/v1 --rm -i --tty \\\\\\n  --image alpine -- /bin/sh\\n/ # apk update\\n/ # apk add redis\\n/ # redis-cli -h redis -a YOUR_PASSWORD_HERE\\nredis:6379\\u003e \\n```\\n\\nWhen you quit the shell the pod for this temporary Alpine container will be deleted.\\n\",\"url\":\"https://redis.io\",\"category\":\"database\",\"image_url\":\"https://api.civo.com/k3s-marketplace/redis.png\",\"plans\":null},{\"name\":\"Traefik\",\"title\":null,\"version\":\"(default)\",\"default\":true,\"dependencies\":null,\"maintainer\":\"@Rancher_Labs\",\"description\":\"A reverse proxy/load-balancer that's easy, dynamic, automatic, fast, full-featured, open source, production proven and provides metrics.\",\"post_install\":\"## Traefik - Default ingress controller\\n\\n### External access to your services\\n\\nTraefik is installed in K3s as the default ingress controller. To use it for your applications all you have to do is apply a YAML file like the one below to handle ingress:\\n\\n```\\napiVersion: extensions/v1beta1\\nkind: Ingress\\nmetadata:\\n  name: yourapp-ingress\\n  namespace: default\\n  annotations:\\n    kubernetes.io/ingress.class: traefik\\nspec:\\n  rules:\\n  - host: www.example.com\\n    http:\\n      paths:\\n      - path: /\\n        backend:\\n          serviceName: yourapp-service\\n          servicePort: http\\n```\\n\\nThis will open up http://www.example.com (assuming you pointed that non-real domain record to your cluster's IPs) to the whole world.\\n\",\"url\":\"https://traefik.io\",\"category\":\"architecture\",\"image_url\":\"https://api.civo.com/k3s-marketplace/traefik.png\",\"plans\":null}]",
      "headers": {
        "Cache-Control": "max-age=0, private, must-revalidate",
        "Content-Length": "19900",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Mon, 07 Oct 2019 19:09:54 GMT",
        "Etag": "\"e56cc1d611379553857a5b8f93a735cd\"",
        "Server": "WEBrick/1.4.2 (Ruby/2.6.5/2019-10-01)",
        "Set-Cookie": "_mkra_stck=mysql%3A1570475399.4935112; path=/; max-age=10; expires=Mon, 07 Oct 2019 19:10:04 -0000; HttpOnly",
        "Vary": "Accept-Encoding",
        "X-Ratelimit-Limit": "50",
        "X-Ratelimit-Remaining": "48",
        "X-Ratelimit-Reset": "1570475400",
        "X-Request-Id": "b0b7c972-9387-45ab-ae83-3c2d3e372d4b",
        "X-Runtime": "0.029433"
      },
      "status_code": 200,
      "type": "ok"
    }
  }
]