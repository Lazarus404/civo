defmodule Civo.Templates do
  @moduledoc """
  Instances are built from a template. Templates may be either a 
  base OS install such as Ubuntu 14.04 LTS, a control-panel based 
  hosting setup or a fully setup application ready to configure 
  for your use.
  """
  #  This is a short identifier for the template, it should be lowercase letters, dashs, underscores, full stop/periods and numbers only (optional: defaults to a new UUID).
  defstruct id: nil,
            #  This is a unqiue, alphanumerical, short, human readable code for the template (required).
            code: nil,
            #  This is a short human readable name for the template (optional).
            name: nil,
            # This is the ID of a bootable volume, either owned by you or global (optional; but must be specified if no template_id is specified).
            volume_id: nil,
            #  This is the Openstack Glance Image ID or the ID of another template, either owned by you or global (optional; but must be specified if no volume_id is specified).
            image_id: nil,
            # A one line description of the template (optional)
            short_description: nil,
            # A multi-line description of the template, in Markdown format (optional).
            description: nil,
            #  The default username to suggest that the user creates (optional: defaults to civo).
            default_username: nil,
            #  Commonly referred to as 'user-data', this is a customisation script that is run after the instance is first booted. 
            #  We recommend using cloud-config as it's a great distribution-agnostic way of configuring cloud servers. If you put $INITIAL_USER 
            #  in your script, this will automatically be replaced by the initial user chosen when creating the instance, $INITIAL_PASSWORD will 
            #  be replaced with the random password generated by the system, $HOSTNAME is the fully qualified domain name of the instance and 
            #  $SSH_KEY will be the content of the SSH public key. (this is technically optional, but you won't really be able to use instances 
            #  without it - see our learn guide on templates for more information)
            cloud_config: nil

  @type t :: %{
          id: String.t(),
          code: String.t(),
          name: String.t(),
          volume_id: String.t(),
          image_id: String.t(),
          short_description: String.t(),
          description: String.t(),
          default_username: String.t(),
          cloud_config: String.t()
        }

  @path "templates"

  @doc """
  Create a template for an account.

  Any user can create templates for their account, only 
  administrators can create global templates.

  ### Request
  The required parameters are listed below. Template IDs must 
  be unique within a given account, but can be the same as a 
  global template (to override that template for your 
  instances).

  | Name | Description |
  | ---- | ----------- |
  | id | This is a short identifier for the template, it should be lowercase letters, dashs, underscores, full stop/periods and numbers only (optional: defaults to a new UUID). |
  | code | This is a unqiue, alphanumerical, short, human readable code for the template (required). |
  | name | This is a short human readable name for the template (optional). |
  | volume_id | This is the ID of a bootable volume, either owned by you or global (optional; but must be specified if no template_id is specified). |
  | image_id | This is the Openstack Glance Image ID or the ID of another template, either owned by you or global (optional; but must be specified if no volume_id is specified). |
  | short_description | A one line description of the template (optional) |
  | description | A multi-line description of the template, in Markdown format (optional). |
  | default_username | The default username to suggest that the user creates (optional: defaults to civo). |
  | cloud_config | Commonly referred to as 'user-data', this is a customisation script that is run after the instance is first booted. We recommend using cloud-config as it's a great distribution-agnostic way of configuring cloud servers. If you put $INITIAL_USER in your script, this will automatically be replaced by the initial user chosen when creating the instance, $INITIAL_PASSWORD will be replaced with the random password generated by the system, $HOSTNAME is the fully qualified domain name of the instance and $SSH_KEY will be the content of the SSH public key. (this is technically optional, but you won't really be able to use instances without it - see our learn guide on templates for more information) |

  ### Response
  The response is a JSON object that simply confirms that the 
  template was created.

  ```elixir
  {
    "result": "success",
    "id": "283d5ee6-fa9f-4e40-8e1a-bdc28812d593"
  }
  ```
  """
  @spec create(t()) :: Civo.Response.t() | Civo.Error.t()
  def create(%__MODULE__{} = params),
    do: Civo.post(@path, params)

  @doc """
  Update an existing template.

  After creating a custom template, any user can update their 
  template.

  ### Request
  The parameters are as per creation of templates.

  ### Response
  The response is a JSON object that simply confirms that 
  the template was updated.

  ```elixir
  {
    "id": "283d5ee6-fa9f-4e40-8e1a-bdc28812d593",
    "code": "my-linux-1.0",
    "name": "My Linux 1.0",
    "account_id": null,
    "image_id": null,
    "volume_id": "e9f6e4d8-be7b-40c0-979d-4669813aa1ca",
    "short_description": "...",
    "description": "...",
    "default_username": "ubuntu",
    "cloud_config": "..."
  }
  ```
  """
  @spec update(t()) :: Civo.Response.t() | Civo.Error.t()
  def update(%__MODULE__{} = params),
    do: Civo.post(@path, params)

  @doc """
  List all templates for an account.

  ### Request
  This request doesn't take any parameters.

  ### Response
  The response from the server will be a JSON array of templates.

  ```elixir
  [
    {
      "id": "773aea72-d068-4cb7-8e08-28841acef0cb",
      "code": "ubuntu-18.04",
      "name": "Ubuntu 18.04",
      "account_id": null,
      "image_id": null,
      "volume_id": "61c2cfe2-f7f3-46e7-b5c9-7b03ae25ea86",
      "short_description": "Ubuntu 18.04",
      "description": "The freely available Ubuntu 18.04 OS, minimally installed with just OpenSSH server",
      "default_username": "ubuntu",
      "cloud_config": "#cloud-config contents"
    },
    // ...
  ]
  ```
  """
  @spec list() :: Civo.Response.t() | Civo.Error.t()
  def list(),
    do: Civo.get(@path)

  @doc """
  Delete a template from an account.

  Global templates CANNOT be removed by the API, they must be 
  removed directly from the system (due to the risk of 
  breakages for a large number of account holders).

  #### Request
  This request takes no parameters, only the id of the template 
  to delete is in the URL. No confirmation step is required, 
  this step will remove the template immediately.

  ### Response
  The response from the server will be a JSON block. The 
  response will include a result field and the HTTP status will 
  be 202 Accepted.

  ```elixir
  {
    "result": "success"
  }
  ```
  """
  @spec delete(String.t()) :: Civo.Response.t() | Civo.Error.t()
  def delete(id),
    do:
      @path
      |> Path.join(id)
      |> Civo.delete()
end
